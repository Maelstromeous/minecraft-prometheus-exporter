plugins {
	// Eclipse plugin (makes life easier using Eclipse).
	id 'eclipse'

	// IDEA plugin (makes life easier using IntelliJ IDEA).
	id 'idea'

	// Fabric Loom plugin (required).
	id 'fabric-loom' version '1.7-SNAPSHOT'

	// Shadow Jar plugin: bundle dependencies.
	id 'com.gradleup.shadow' version '8.3.0'
}

// Project settings.
group = mod_group_id
version = mod_version

base {
	archivesName = 'Prometheus-Exporter'
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	mods {
		"${mod_id}" {
			sourceSet sourceSets.main
		}
	}
}

configurations {
	// Create the `compileAndShadow` group to be both compile time dependencies
	// and shadow dependencies (bundle via Shadow Jar).
	compileAndShadow
	compile.extendsFrom compileAndShadow
	shadow.extendsFrom compileAndShadow
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Annotation dependency.
	compileOnly 'org.jetbrains:annotations:24.1.0'

	// Config dependency.
	compileAndShadow 'com.electronwill.night-config:toml:3.8.1'

	// Prometheus dependencies.
	compileAndShadow 'io.prometheus:simpleclient:0.16.0'
	compileAndShadow 'io.prometheus:simpleclient_httpserver:0.16.0'
	compileAndShadow 'io.prometheus:simpleclient_hotspot:0.16.0'
}

// Expand variables in resource files.
processResources {
	var replaceProperties = [
		fabric_version: fabric_version,
		loader_version: loader_version,
		minecraft_version: minecraft_version,
		mod_authors: mod_authors,
		mod_id: mod_id,
		mod_name: mod_name,
		mod_package: mod_package,
		mod_version: mod_version,
	]

	// Record the inputs so Gradle knows when to regenerate the resource files.
	inputs.properties replaceProperties

	filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

// Project JAR settings.
tasks.named('jar', Jar).configure {
	// Include the Minecraft version in the JAR name.
	archiveAppendix = "${minecraft_version}-fabric"

	manifest {
		attributes([
			'Specification-Title': mod_id,
			'Specification-Vendor': mod_authors,
			'Specification-Version': mod_version,
			'Implementation-Title': mod_name,
			'Implementation-Version': mod_version,
			'Implementation-Vendor': mod_authors,
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	// This is the preferred method to reobfuscate/finalize your jar file.
	finalizedBy 'shadowJar'
}

// Configure Shadow Jar.
tasks.named('shadowJar').configure {
	// Remove JAR suffix.
	archiveAppendix = tasks.jar.archiveAppendix
	archiveClassifier = tasks.jar.archiveClassifier

	// Relocate shadowed dependencies.
	enableRelocation = true
	relocationPrefix = "${mod_package}.vendors"

	// Only bundle dependencies explicitly marked to shadow.
	configurations = [project.configurations.shadow]

	// Exclude unused classes.
	minimize()
}

tasks.shadowJar.dependsOn tasks.jar
tasks.assemble.dependsOn tasks.shadowJar

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}
