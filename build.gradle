// Forge buildscript.
buildscript {
	// Buildscript Maven repositories.
	repositories {
		// Forge.
		maven {
			url = 'https://files.minecraftforge.net/maven'
		}

		// Maven Central.
		mavenCentral()
	}

	// Buildscript dependencies.
	dependencies {
		// Forge Gradle plugin.
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

plugins {
	// Eclipse plugin (makes life easier using Eclipse).
	id 'eclipse'

	// IDEA plugin (makes life easier using IntelliJ IDEA).
	id 'idea'

	// Java plugin (required).
	id 'java'

	// Shadow Jar plugin: bundle dependencies.
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

// Forge Gradle plugin (required).
apply plugin: 'net.minecraftforge.gradle'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println 'Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch')

// Project settings.
archivesBaseName = 'Prometheus-Exporter'
group = 'com.github.cpburnz'
version = '1.1.0'

// Extra project settings.
ext {
	modAuthors = 'cpburnz'
	modId = 'prometheus_exporter'
	modName = 'Prometheus Exporter'
	modPackage = "${project.group}.minecraft_prometheus_exporter"
	modTrackerUrl = 'https://github.com/cpburnz/minecraft-prometheus-exporter/issues'
	modUrl = 'https://github.com/cpburnz/minecraft-prometheus-exporter'

	fmlMinVersion = '40'
	forgeMinVersion = '40.2'
	minecraftMinVersion = '1.18.2'
}

minecraft {
	// The mappings can be changed at any time and must be in the following format.
	// Channel:   Version:
	// official   MCVersion             Official field/method names from Mojang mapping files
	// parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
	//
	// You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
	// See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
	//
	// Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
	// Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
	//
	// Use non-default mappings at your own risk. They may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'official', version: '1.18.2'

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'prometheus_exporter'

			mods {
				prometheus_exporter {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'prometheus_exporter'

			mods {
				prometheus_exporter {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', project.modId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				prometheus_exporter {
					source sourceSets.main
				}
			}
		}
	}
}

configurations {
	// Create the `compileAndShadow` group to be both compile time dependencies
	// and shadow dependencies (bundle via Shadow Jar).
	compileAndShadow
	compile.extendsFrom compileAndShadow
	shadow.extendsFrom compileAndShadow
	minecraftLibrary.extendsFrom compileAndShadow
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then
	// 'net.minecraft' it is assumed that the dep is a ForgeGradle 'patcher'
	// dependency. And its patches will be applied. The userdev artifact is a
	// special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'

	// Prometheus dependencies.
	compileAndShadow group: 'io.prometheus', name: 'simpleclient', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_httpserver', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_hotspot', version: '0.16.0'
}

// Expand variables in resource files.
processResources {
	def vars = [
		'fmlMinVersion': project.fmlMinVersion,
		'forgeMinVersion': project.forgeMinVersion,
		'minecraftMinVersion': project.minecraftMinVersion,
		'modAuthors': project.modAuthors,
		'modName': project.modName,
		'modId': project.modId,
		'modTrackerUrl': project.modTrackerUrl,
		'modUrl': project.modUrl,
		'version': project.version,
	]


	// Configure duplicates strategy to warm about duplicates. This is new and
	// required in Gradle 7. I have no idea why Gradle is reporting duplicates.
	duplicatesStrategy = 'warn'

	// Record the inputs so Gradle knows when to regenerate the resource files.
	inputs.properties vars

	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		expand vars
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

// Project JAR settings.
jar {
	// Include the Minecraft version in the JAR name.
	archiveAppendix = "${project.minecraftMinVersion}-forge"

	manifest {
		attributes([
			'Specification-Title': 'examplemod',
			'Specification-Vendor': 'examplemodsareus',
			'Specification-Version': '1',
			'Implementation-Title': project.modName,
			'Implementation-Version': project.version,
			'Implementation-Vendor': project.modAuthors,
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Configure Shadow Jar.
shadowJar {
	// Remove JAR suffix.
	archiveAppendix = tasks.jar.archiveAppendix
	archiveClassifier = tasks.jar.archiveClassifier

	// Only bundle dependencies explicitly marked to shadow.
	configurations = [project.configurations.shadow]

	// Exclude unused classes.
	minimize()
}

// Vendor dependencies with Shadow Jar.
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task vendorShadowJarDeps(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
	prefix = "${project.modPackage}.vendors"
}

tasks.shadowJar.dependsOn tasks.vendorShadowJarDeps

// Reobfuscate the Shadow Jar because the Minecraft classes must be obfuscated.
reobf {
	jar {
		// Disable generation of unshadowed obfuscated JAR.
		enabled = false
	}
	shadowJar {
		enabled = true
	}
}

tasks.reobfShadowJar.dependsOn tasks.jar
tasks.assemble.dependsOn tasks.reobfShadowJar
