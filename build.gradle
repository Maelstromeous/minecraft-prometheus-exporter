plugins {
	// Eclipse plugin (makes life easier using Eclipse).
	id 'eclipse'

	// IDEA plugin (makes life easier using IntelliJ IDEA).
	id 'idea'

	// Forge Gradle plugin (required).
	id 'net.minecraftforge.gradle' version '5.1.+'

	// Shadow Jar plugin: bundle dependencies.
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Project settings.
archivesBaseName = 'Prometheus-Exporter'
group = mod_group_id
version = mod_version

minecraft {
	// The mappings can be changed at any time and must be in the following format.
	// Channel:   Version:
	// official   MCVersion             Official field/method names from Mojang mapping files
	// parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
	//
	// You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
	// See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
	//
	// Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
	// Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
	//
	// Use non-default mappings at your own risk. They may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: mapping_channel, version: mapping_version

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				prometheus_exporter {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				prometheus_exporter {
					source sourceSets.main
				}
			}
		}

		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				prometheus_exporter {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				prometheus_exporter {
					source sourceSets.main
				}
			}
		}
	}
}

configurations {
	// Create the `compileAndShadow` group to be both compile time dependencies
	// and shadow dependencies (bundle via Shadow Jar).
	compileAndShadow
	compile.extendsFrom compileAndShadow
	shadow.extendsFrom compileAndShadow
	minecraftLibrary.extendsFrom compileAndShadow
}

repositories {
	// Put repositories for dependencies here
	// ForgeGradle automatically adds the Forge maven and Maven Central for you

	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
	// flatDir {
	//     dir 'libs'
	// }
}

dependencies {
	// Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	// Prometheus dependencies.
	compileAndShadow group: 'io.prometheus', name: 'simpleclient', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_httpserver', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_hotspot', version: '0.16.0'
}

// Expand variables in resource files.
processResources {
	def vars = [
		'forge_version_range': forge_version_range,
		'loader_version_range': loader_version_range,
		'minecraft_version_range': minecraft_version_range,
		'mod_authors': mod_authors,
		'mod_description': mod_description,
		'mod_id': mod_id,
		'mod_license': mod_license,
		'mod_logo_file': mod_logo_file,
		'mod_name': mod_name,
		'mod_tracker_url': mod_tracker_url,
		'mod_url': mod_url,
		'mod_version': mod_version,
	]

	// Configure duplicates strategy to warm about duplicates. This is new and
	// required in Gradle 7. I have no idea why Gradle is reporting duplicates.
	duplicatesStrategy = 'warn'

	// Record the inputs so Gradle knows when to regenerate the resource files.
	inputs.properties vars

	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		expand vars
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

// Project JAR settings.
jar {
	// Include the Minecraft version in the JAR name.
	archiveAppendix = "${minecraft_version}-forge"

	manifest {
		attributes([
			'Specification-Title': mod_name,
			'Specification-Vendor': mod_authors,
			'Specification-Version': mod_version,
			'Implementation-Title': mod_name,
			'Implementation-Version': mod_version,
			'Implementation-Vendor': mod_authors,
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfShadowJar')

// Configure Shadow Jar.
shadowJar {
	// Remove JAR suffix.
	archiveAppendix = tasks.jar.archiveAppendix
	archiveClassifier = tasks.jar.archiveClassifier

	// Only bundle dependencies explicitly marked to shadow.
	configurations = [project.configurations.shadow]

	// Exclude unused classes.
	minimize()
}

// Vendor dependencies with Shadow Jar.
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task vendorShadowJarDeps(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
	prefix = "${mod_package}.vendors"
}

tasks.shadowJar.dependsOn tasks.vendorShadowJarDeps

// Reobfuscate the Shadow Jar because the Minecraft classes must be obfuscated.
reobf {
	jar {
		// Disable generation of unshadowed obfuscated JAR.
		enabled = false
	}
	shadowJar {
		enabled = true
	}
}

tasks.reobfShadowJar.dependsOn tasks.jar
tasks.assemble.dependsOn tasks.reobfShadowJar

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
